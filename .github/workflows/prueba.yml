name: Procesamiento de fecha para API NASA

on:
  push:
    branches:
      - master

jobs:
  leer-fechas:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Instalar libreria jq para leer archivos JSON
        run: sudo apt-get install jq

      - name: Leer archivo JSON y obtener fechas
        run: |
          echo "Reading dates.json"
          dates=$(jq -r '.dates[]' dates.json)
          echo "::set-output name=dates::$dates"

  peticion-api-nasa:
    needs: leer-fechas
    runs-on: ubuntu-latest
    strategy:
      matrix:
        date: ${{ fromJson(needs.leer-fechas.outputs.dates) }}

    steps:
      - name: Verificar si la respuesta esta en Cache
        run: |
          if [ -f "nasa_responses/response_${{ matrix.date }}.json" ]; then
            echo "Respuesta para la fecha ${{ matrix.date }} existe en cache. Saltando llamada al API."
            echo "cached=true" >> $GITHUB_ENV
          else
            echo "cached=false" >> $GITHUB_ENV
          fi

      - name: Realizar peticion al API
        if: env.cached == 'false'
        id: api_request
        run: |
          url="https://api.nasa.gov/planetary/apod?api_key=${{ secrets.API_KEY }}&date=${{ matrix.date }}"
          echo "Realizando request a la URL : $url"
          
          # Realizar la petición y capturar tanto el código de estado como la respuesta
          response=$(curl -s -w "%{http_code}" -o response.json "$url")
          
          if [ "$response" -eq 200 ]; then
            echo "Respuesta para la fecha ${{ matrix.date }} Guardada."
            # Almacenar la respuesta en un archivo
            mv response.json "nasa_responses/response_${{ matrix.date }}.json"
          else
            echo "Error: El codigo de la respuesta recibida $response para la fecha ${{ matrix.date }}. Saltando peticion."
            rm response.json  # Eliminar el archivo temporal si hubo un error
            exit 0  # Salir sin errores para seguir con otras fechas
          fi

      - name: Descargando imagen
        if: env.cached == 'false'
        run: |
          image_url=$(jq -r '.url' "nasa_responses/response_${{ matrix.date }}.json")
          echo "Descargando imagen desde: $image_url"
          curl -s -o "img-${{ matrix.date }}.jpg" "$image_url"
          echo "Imagen descargado como img-${{ matrix.date }}.jpg"

      - name: Cargando imagen como artefacto
        if: env.cached == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: img-${{ matrix.date }}
          path: img-${{ matrix.date }}.jpg

  guardando-en-cache:
    needs: peticion-api-nasa
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Respuesta del API en Cache
        uses: actions/cache@v3
        with:
          path: ./nasa_responses
          key: nasa-responses-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            nasa-responses-${{ runner.os }}-

      - name: Lista las respuesta almacenadas en cache
        run: |
          echo "Repuestas en cache:"
          ls nasa_responses